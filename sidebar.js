// sidebar.js - Sidebar script with email context management

// Store email context (messages to include in AI prompts)
let emailContext = [];

// Update the UI to reflect current context
function updateContextUI() {
  const count = emailContext.length;
  document.getElementById('contextCount').textContent = count;
  
  const contextDiv = document.getElementById('emailContext');
  if (count === 0) {
    contextDiv.style.display = 'none';
  } else {
    contextDiv.style.display = 'block';
    contextDiv.innerHTML = emailContext.map((email, idx) => 
      `<div style="margin-bottom: 8px; padding-bottom: 8px; border-bottom: 1px solid #ddd;">
        <strong>${idx + 1}.</strong> ${email.subject}<br/>
        <small>From: ${email.author} | ${new Date(email.date).toLocaleString()}</small>
      </div>`
    ).join('');
  }
}

// Add current email to context
document.getElementById('addCurrentEmail').addEventListener('click', async () => {
  const r = await browser.runtime.sendMessage({ type: 'getDisplayedMessage' });
  if (r.ok) {
    const m = r.message;
    // Check if already in context
    const exists = emailContext.some(e => e.id === m.id);
    if (!exists) {
      emailContext.push({
        id: m.id,
        subject: m.subject,
        author: m.author,
        date: m.date,
        body: m.parts?.map(p => p.body || '').join('\n') || ''
      });
      updateContextUI();
    } else {
      alert('This email is already in context');
    }
  } else {
    alert('No message currently displayed');
  }
});

// Clear context
document.getElementById('clearContext').addEventListener('click', () => {
  emailContext = [];
  updateContextUI();
});

// Show current email preview
document.getElementById('readCurrent').addEventListener('click', async () => {
  const r = await browser.runtime.sendMessage({ type: 'getDisplayedMessage' });
  if (r.ok) {
    const m = r.message;
    const summary = `Subject: ${m.subject}\nFrom: ${m.author}\nDate: ${m.date}\n\n${m.parts?.map(p => p.body || '').join('\n').slice(0, 1000)}`;
    document.getElementById('messageSummary').textContent = summary;
  } else {
    document.getElementById('messageSummary').textContent = 'No message displayed';
  }
});

// Search messages
document.getElementById('searchBtn').addEventListener('click', async () => {
  const term = document.getElementById('searchTerm').value;
  const r = await browser.runtime.sendMessage({ type: 'searchMessages', query: { subjectContains: term, pageSize: 25 } });
  if (r.ok) {
    document.getElementById('searchResults').textContent = JSON.stringify(r.result.messages?.map(m => ({ id: m.id, subject: m.subject, author: m.author })) , null, 2);
  } else {
    document.getElementById('searchResults').textContent = 'Error: ' + r.error;
  }
});

// Create sample draft
document.getElementById('createSampleDraft').addEventListener('click', async () => {
  const r = await browser.runtime.sendMessage({ type: 'createDraft', subject: 'Draft from Copilot', body: 'This draft was created by Copilot.' });
  if (r.ok) alert('Draft created (composeTabId: ' + r.composeTabId + ')'); else alert('Error: ' + r.error);
});

// Generate ICS
document.getElementById('genICS').addEventListener('click', async () => {
  const events = [
    { uid: 'ev1', start: new Date().toISOString(), end: new Date(Date.now()+3600*1000).toISOString(), summary: 'Test meeting 1', description: 'Generated by Copilot', location: 'Zoom' },
    { uid: 'ev2', start: new Date(Date.now()+86400*1000).toISOString(), end: new Date(Date.now()+90000*1000).toISOString(), summary: 'Test meeting 2', description: 'Generated by Copilot', location: 'Office' }
  ];
  const r = await browser.runtime.sendMessage({ type: 'generateICS', events });
  if (r.ok) {
    const a = document.getElementById('downloadIcs');
    a.href = r.url;
    a.download = 'events.ics';
    a.style.display = 'inline-block';
    a.textContent = 'Download events.ics';
  } else {
    alert('ICS generation error');
  }
});

// Ask AI with email context
document.getElementById('ask').addEventListener('click', async () => {
  const s = await browser.storage.local.get('openaiApiKey');
  const key = s.openaiApiKey;
  if (!key) { 
    document.getElementById('aiResponse').textContent = 'No API key configured. Please set it in the add-on settings (Tools > Add-ons > Copilot > Options).'; 
    return; 
  }
  
  const userPrompt = document.getElementById('prompt').value;
  if (!userPrompt.trim()) {
    document.getElementById('aiResponse').textContent = 'Please enter a prompt.';
    return;
  }
  
  document.getElementById('aiResponse').textContent = 'Calling OpenAI...';
  
  // Build context from emails
  let contextText = '';
  if (emailContext.length > 0) {
    contextText = 'Here are the emails to analyze:\n\n';
    emailContext.forEach((email, idx) => {
      contextText += `--- Email ${idx + 1} ---\n`;
      contextText += `Subject: ${email.subject}\n`;
      contextText += `From: ${email.author}\n`;
      contextText += `Date: ${email.date}\n`;
      contextText += `Body:\n${email.body.slice(0, 2000)}\n\n`;
    });
    contextText += '--- End of emails ---\n\n';
  }
  
  const fullPrompt = contextText + userPrompt;
  
  try {
    const resp = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: { 'Authorization': 'Bearer ' + key, 'Content-Type': 'application/json' },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [{ role: 'user', content: fullPrompt }],
        max_tokens: 1000
      })
    });
    const data = await resp.json();
    
    if (data.error) {
      document.getElementById('aiResponse').textContent = 'OpenAI error: ' + (data.error.message || JSON.stringify(data.error));
      return;
    }
    
    const text = (data.choices && data.choices[0] && (data.choices[0].message?.content || data.choices[0].text)) || JSON.stringify(data);
    document.getElementById('aiResponse').textContent = text;
  } catch (err) {
    document.getElementById('aiResponse').textContent = 'OpenAI error: ' + err;
  }
});

// Collapse toggle
document.getElementById('toggle').addEventListener('click', () => {
  const body = document.body;
  if (body.style.display === 'none') { 
    body.style.display = ''; 
    document.getElementById('toggle').textContent = 'Collapse'; 
  } else { 
    body.style.display = 'none'; 
    document.getElementById('toggle').textContent = 'Expand'; 
  }
});

// Initialize
updateContextUI();
